grammar org.emoflon.cep.Grapel with org.emoflon.ibex.gt.editor.GT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/gt/editor/GT" as GT

generate grapel "http://www.emoflon.org/cep/Grapel"  

@Override 
EditorGTFile: {EditorGTFile} 
	(imports+=EditorImport)*
  	(patterns+=EditorPattern |
  	conditions+=EditorCondition |
  	events += Event |
  	eventPatterns += EventPattern)*
  	
;

Event:
	'event' name=ID '{'
	(attributes += EventAttribute)*
	'}'
;

EventAttribute:
	type=[ecore::EDataType] | type=[ecore::EClass] name=ID ';' 
;

EventPattern:
	'event_pattern' name=ID returnType=ReturnType '{'
	(nodes += EventPatternNode)*
	(contextConstraints += EventPatternContextConstraint)*
	'#' relationalConstraint = RelationalConstraint 
	('{' (attributeConstraint = AttributeConstraint)'}')?
	returnStatement = ReturnStatement
	'}'
;

ReturnType:
	ReturnSpawn | ReturnApply
;

ReturnSpawn:
	'spawns' returnType=[Event|ID]
;

ReturnApply:
	'applies' returnType=[GT::EditorPattern|ID]
;

ReturnStatement:
	SpawnStatement | ApplyStatement
;

SpawnStatement:
	'spawn' returnArg=[Event|ID]'('
		(returnParams+=AttributeExpression 
			(',' returnParams+=AttributeExpression)* 
		)?
	')'
;

ApplyStatement:
	'apply' returnArg=[GT::EditorPattern|ID]'('
		(returnParams+=AttributeExpression 
			(',' returnParams+=AttributeExpression)* 
		)?
	')' 'to' match=[EventPatternNode|ID]
;

EventPatternNode:
	name=ID ':' type=[Event|ID] | type=[GT::EditorPattern|ID]
;

EventPatternNodeExpression:
	patternNode = [EventPatternNode|ID] ('.' attribute = [EventAttribute|ID] | attribute = [GT::EditorNode|ID])
;

EventPatternNodeAttributeExpression:
	nodeExpression = EventPatternNodeExpression ('.' field = [ecore::EAttribute|ID])?
;

EventPatternContextConstraint:
	lhs = EventPatternNodeExpression
	relation = ContextRelation
	rhs = EventPatternNodeExpression
;

enum ContextRelation:
	EQUAL='==' |
  UNEQUAL='!=' 
;

enum BinaryRelationalOperator:
	AND='&&' |
  	OR='||' |
  	FOLLOWS='->' 
;

enum UnaryRelationalOperator:
	NONE='$NO_RELATION' |
  	ALL='all' 
;

RelationalConstraint:
	BinaryRelationalConstraint
;

BinaryRelationalConstraint returns RelationalConstraint:
	UnaryRelationalConstraint({BinaryRelationalConstraint.left = current} operator=BinaryRelationalOperator right=UnaryRelationalConstraint)*
;

UnaryRelationalConstraint returns RelationalConstraint: {UnaryRelationalConstraint}
	(negated?="!")? (operator=UnaryRelationalOperator)? '(' operand=RelationalConstraint ')' | RelationalNodeExpression
;

RelationalNodeExpression returns RelationalConstraint: {RelationalNodeExpression}
	node = [EventPatternNode|ID]
;


AttributeConstraint:
	BinaryAttributeConstraint 
;
BinaryAttributeConstraint returns AttributeConstraint: 
	UnaryAttributeConstraint({BinaryAttributeConstraint.left = current} operator=AttributeConstraintRelation right=UnaryAttributeConstraint)*
;

UnaryAttributeConstraint returns AttributeConstraint: {UnaryAttributeConstraint}
	(negated?="!")? ('['operand=AttributeConstraint']' |  operand=AttributeRelation | operand=MatchEventState)
;

enum AttributeConstraintRelation:
  AND='&&' |
  	OR='||' 
;

AttributeRelation:
	 lhs = AttributeExpression (relation = AttributeRelationOperator rhs = AttributeExpression)?
;

MatchEventState:
	'vanished' '(' event=[EventPatternNode] ')'
;

enum AttributeRelationOperator:
  GREATER='>' |
  GREATER_OR_EQUAL='>=' |
  EQUAL='==' |
  UNEQUAL='!=' |
  SMALLER_OR_EQUAL='<=' |
  SMALLER='<'
;

AttributeExpression: 
	BinaryAttributeExpression
;

BinaryAttributeExpression returns AttributeExpression: 
	UnaryAttributeExpression({BinaryAttributeExpression.left = current} operator=ArithmeticOperator right=UnaryAttributeExpression)*
;

UnaryAttributeExpression returns AttributeExpression: {UnaryAttributeExpression}
	(negative?="-")? (operator=UnaryOperator'(' | '(') operand=AttributeExpression')' | AttributeExpressionOperand
;


AttributeExpressionOperand:
	AttributeExpressionLiteral | EventPatternNodeAttributeExpression
;

AttributeExpressionLiteral:
	NumberLiteral  | StringLiteral | BooleanLiteral | EnumLiteral
;

NumberLiteral:
	DoubleLiteral | IntegerLiteral
;

DoubleLiteral:
	value = Double
;

IntegerLiteral:
	value = Integer
;

StringLiteral:
	value = STRING
;

BooleanLiteral:
	value = BOOLEAN
;

EnumLiteral:
	'enum::' value = [ecore::EEnumLiteral]
;

Double returns ecore::EDouble:
	('-')?INT '.' INT
;

Integer returns ecore::EInt:
	(('-')? INT)
;

@Override
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9')*
;

@Override
terminal STRING returns ecore::EString:
	'"' ( '""' | !('"') )* '"'
;

BOOLEAN returns ecore::EBoolean:
	TRUE | FALSE
;

terminal TRUE returns ecore::EBoolean:
	'true'
;

terminal FALSE returns ecore::EBoolean:
	'false'
;

enum ArithmeticOperator:
	PLUS='+' 	|
	MINUS='-' 	|
	MULTIPLY='*'|
 	DIVIDE='/' 	|
 	POW='^'
;

enum UnaryOperator:
	NONE='$NO_OP'     |
	ABS='abs'	|
	SQRT='sqrt' |
	sin='sin'	|
	cos='cos'	
;
