/*
 * generated by Xtext 2.20.0
 */
package org.emoflon.cep.validation;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.xtext.parser.ParseException;
import org.eclipse.xtext.validation.Check;
import org.emoflon.cep.grapel.ApplyStatement;
import org.emoflon.cep.grapel.ArithmeticOperator;
import org.emoflon.cep.grapel.AttributeExpression;
import org.emoflon.cep.grapel.AttributeExpressionLiteral;
import org.emoflon.cep.grapel.AttributeRelation;
import org.emoflon.cep.grapel.AttributeRelationOperator;
import org.emoflon.cep.grapel.BinaryAttributeExpression;
import org.emoflon.cep.grapel.DoubleLiteral;
import org.emoflon.cep.grapel.EditorGTFile;
import org.emoflon.cep.grapel.EnumLiteral;
import org.emoflon.cep.grapel.Event;
import org.emoflon.cep.grapel.EventAttribute;
import org.emoflon.cep.grapel.EventPattern;
import org.emoflon.cep.grapel.EventPatternNode;
import org.emoflon.cep.grapel.EventPatternNodeAttributeExpression;
import org.emoflon.cep.grapel.EventPatternNodeExpression;
import org.emoflon.cep.grapel.GrapelPackage;
import org.emoflon.cep.grapel.IntegerLiteral;
import org.emoflon.cep.grapel.ReturnApply;
import org.emoflon.cep.grapel.ReturnSpawn;
import org.emoflon.cep.grapel.ReturnStatement;
import org.emoflon.cep.grapel.SpawnStatement;
import org.emoflon.cep.grapel.StringLiteral;
import org.emoflon.cep.grapel.UnaryAttributeExpression;
import org.emoflon.cep.grapel.UnaryOperator;
import org.emoflon.ibex.gt.editor.gT.ArithmeticExpression;
import org.emoflon.ibex.gt.editor.gT.EditorNode;
import org.emoflon.ibex.gt.editor.gT.EditorParameter;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class GrapelValidator extends AbstractGrapelValidator {
	
	// blacklisted names not liked by Apama or Java
	public static final Set<String> keywordBlacklist = new HashSet<>(Arrays.asList("abstract", "action", "aggregate", "all", "and", "as", "assert", "at", "between", "boolean", "bounded", 
			"break", "by", "byte", "case", "catch", "char", "chunk", "class", "completed", "const", "constant", "context", "continue", "currentTime", "decimal", "day", 
			"days", "default", "dictionary", "die", "do", "double", "EAttribute", "EBoolean", "EDataType", "EClass", "EClassifier", "EDouble", "EFloat", "EInt", "else", 
			"emit", "enqueue", "enum", "EPackage", "EReference", "EString", "event", "every", "export", "extends", "false", "final", "finally",
			"find", "float", "for", "form", "goto", "group", "having", "hour", "hours", "if", "implements", "import", "in", "inputs", "instanceof", "int", "integer", "interface",
			"join", "key", "largest", "location", "log", "long", "millisecond", "milliseconds", "module", "msec", "minute", "minutes", "min", "monitor", "native", "new", "not", "null", 
			"on", "onBeginRecovery", "onConcludeRecovery", "ondie", "onload", "onunload", "optional", "or", "package", "parameters", "partition", "persistent", "print", "private",
			"protected", "public", "query", "requires", "retain", "return", "returns", "route", "rstream", "second", "seconds", "sec", "select", "send", "sequence", "short",
			"smallest", "spawn", "static", "stream", "streamsource", "strictfp", "string", "super", "switch", "synchronized", "then", "this", "throw", "throws", "to", "transient",
			"true", "try", "unbounded", "unique", "unmatched", "using", "var", "void", "volatile", "wait", "where", "while", "wildcard", "with", "within", "without", "xor", "#"));

	public static final String CODE_PREFIX = "org.emoflon.cep.";
	
	// Errors for events
	public static final String EVENT_NAME_FORBIDDEN_MESSAGE = "Event cannot be named '%s'. Use a different name.";
	public static final String EVENT_NAME_MULTIPLE_DECLARATIONS_MESSAGE = "Event '%s' must not be declared multiple times.";
	
	// Errors for event_attributes
	public static final String EVENT_ATTRIBUTE_FORBIDDEN_TYPE = "Event attribute cannot be of type '%s'. Please use one of the following: EDouble, EInt, EBoolan, EString.";
	public static final String EVENT_ATTRIBUTE_INVALID = CODE_PREFIX +  "event_pattern.attribute.invalid";
	
	// Errors for event_patterns
	public static final String EVENT_PATTERN_NAME_FORBIDDEN_MESSAGE = "Event_pattern cannot be named '%s'. Use a different name.";
	public static final String EVENT_PATTERN_NAME_MULTIPLE_DECLARATIONS_MESSAGE = "Event_pattern '%s' must not be declared multiple times.";
	
	public static final String EVENT_PATTERN_INVALID_RETURN = CODE_PREFIX +  "event_pattern.returnStatement.invalid";
	public static final String SPAWNING_EVENT_PATTERN_EVENT_MISSMATCH_MESSAGE = "Event_pattern %s spawns a different event than indicated.";
	public static final String SPAWNING_EVENT_PATTERN_PARAMETER_NUMBER_MISSMATCH_MESSAGE = "Event_pattern %s spawns an event with the wrong number of parameters.";
	public static final String SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE = "Event_pattern %s spawns an event with wrong parameters.";
	public static final String SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING = "Event_pattern %s spawns an event without matching parameters. Will be cast automatically...";
	public static final String SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR = "Event_pattern %s spawns an event without matching parameters. \nOnly EString attributes and EString literals can be parsed to numeric values.";
	
	// Errors for event pattern nodes
	public static final String EVENT_PATTERN_NODE_NAME_FORBIDDEN_MESSAGE = "Event_pattern node cannot be named '%s'. Use a different name.";
	public static final String EVENT_PATTERN_NODE_NAME_MULTIPLE_DECLARATIONS_MESSAGE = "Event_pattern node '%s' must not be declared multiple times.";
	
	// Errors for arithmetic expressions
	public static final String ARITHMETIC_EXPRESSION_INVALID = CODE_PREFIX +  "event_pattern.arithmetic_expression.invalid";
	public static final String ARITHMETIC_EXPRESSION_FORBIDDEN_OPERATION = "Operation '%s' can not be used on data type '%s'.";
	public static final String ARITHMETIC_EXPRESSION_FORBIDDEN_ECLASS = "Cannot perform arithmetic operations on EClass objects.";
	
	// Errors for attribute relations
	public static final String ATTRIBUTE_RELATION_INVALID = CODE_PREFIX +  "event_pattern.attribute_relation.invalid";
	public static final String ATTRIBUTE_RELATION_DISCURAGED = CODE_PREFIX +  "event_pattern.attribute_relation.discuraged";
	public static final String ATTRIBUTE_RELATION_BOOLEAN_COMPARISON = "Cannot compare EBoolean to '%s'.";
	public static final String ATTRIBUTE_RELATION_ENUM_COMPARISON = "Cannot compare EEnum to '%s'.";
	public static final String ATTRIBUTE_RELATION_STRING_COMPARISON = "Cannot compare EString to '%s'.";
	public static final String ATTRIBUTE_RELATION_OBJECT_COMPARISON = "Cannot compare EClass objects to '%s'.";
	public static final String ATTRIBUTE_RELATION_FORBIDDEN_OPERATION = "Operation '%s' can not be used on data type '%s'.";
	public static final String ATTRIBUTE_RELATION_UNUSUAL_OPERATION = "Operation '%s' should not be used on data type '%s', it might lead to unexpected results.";

	@Check
	public void checkEvent(Event event) {
		try {
			checkEventNameValid(event);
			checkEventNameUnique(event);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Check void checkEventAttribute(EventAttribute eventAttribute) {
		try {
			if(eventAttribute.getType() instanceof EDataType) {
				EDataType type  = (EDataType) eventAttribute.getType();
				if(!(type == EcorePackage.Literals.EDOUBLE || type == EcorePackage.Literals.EINT || type == EcorePackage.Literals.EBOOLEAN || type == EcorePackage.Literals.ESTRING)) {
					error(String.format(EVENT_ATTRIBUTE_FORBIDDEN_TYPE, type.getName()),
							GrapelPackage.Literals.EVENT_ATTRIBUTE__TYPE,
							EVENT_ATTRIBUTE_INVALID);
				}
			}	
		}catch(Exception e) {
			e.printStackTrace();
		}

		
	}

	@Check
	public void checkEventPattern(EventPattern pattern) {
		try {
			checkEventPatternNameValid(pattern);
			checkEventPatternNameUnique(pattern);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Check
	public void checkEventPatternNode(EventPatternNode node) {
		try {
			checkEventPatternNodeNameValid(node);
			checkEventPatternNodeNameUnique(node);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Check
	public void checkReturnStatement(SpawnStatement statement) {
		try {
			EventPattern pattern = (EventPattern)statement.eContainer();
			
			if(!(pattern.getReturnType() instanceof ReturnSpawn)) {
				error(String.format(SPAWNING_EVENT_PATTERN_EVENT_MISSMATCH_MESSAGE, pattern.getName()),
						GrapelPackage.Literals.SPAWN_STATEMENT__RETURN_ARG,
						EVENT_PATTERN_INVALID_RETURN);
				return;
			}
			if(statement.getReturnArg() == null)
				return;
			
			ReturnSpawn returnType = (ReturnSpawn)pattern.getReturnType();
			if(!statement.getReturnArg().equals(returnType.getReturnType()))
				error(String.format(SPAWNING_EVENT_PATTERN_EVENT_MISSMATCH_MESSAGE, pattern.getName()),
						GrapelPackage.Literals.SPAWN_STATEMENT__RETURN_ARG,
						EVENT_PATTERN_INVALID_RETURN);
			checkReturnStatementParameters(pattern,  statement);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Check
	public void checkReturnStatement(ApplyStatement statement) {
		try {
			EventPattern pattern = (EventPattern)statement.eContainer();
			
			if(!(pattern.getReturnType() instanceof ReturnApply)) {
				error(String.format(SPAWNING_EVENT_PATTERN_EVENT_MISSMATCH_MESSAGE, pattern.getName()),
						GrapelPackage.Literals.SPAWN_STATEMENT__RETURN_ARG,
						EVENT_PATTERN_INVALID_RETURN);
				return;
			}
			if(statement.getReturnArg() == null)
				return;
			
			ReturnApply returnType = (ReturnApply)pattern.getReturnType();
			if(!statement.getReturnArg().equals(returnType.getReturnType()))
				error(String.format(SPAWNING_EVENT_PATTERN_EVENT_MISSMATCH_MESSAGE, pattern.getName()),
						GrapelPackage.Literals.SPAWN_STATEMENT__RETURN_ARG,
						EVENT_PATTERN_INVALID_RETURN);
			checkReturnStatementParameters(pattern,  statement);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@Check
	public void attributeExpressions(AttributeExpression expr) {
		try {
			if(!(expr.eContainer() instanceof ReturnStatement && expr instanceof EventPatternNodeAttributeExpression)) {
				checkObjectExpressions(expr);
			}
			checkBooleanExpressions(expr);
			checkStringExpressions(expr);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}


	@Check 
	public void attributeRelations(AttributeRelation relation) {
		try {
			checkBooleanComparisons(relation);
			checkStringComparisons(relation);
			checkFloatComparisons(relation);
			checkEnumComparisons(relation);
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private void checkEnumComparisons(AttributeRelation relation) {
		EClassifier lhsType = getTypeOfExpression(relation.getLhs());
		if(relation.getRhs() == null) {
			if(lhsType!=EcorePackage.Literals.EENUM) {
				error(String.format("Non-Enum data types may not be used in enum comparisons."),
						GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
						ATTRIBUTE_RELATION_INVALID);
				return;
			}
		}
		
		EClassifier rhsType = getTypeOfExpression(relation.getRhs());
		
		if(lhsType==rhsType && lhsType==EcorePackage.Literals.EENUM && 
				!(relation.getRelation()==AttributeRelationOperator.EQUAL || relation.getRelation()==AttributeRelationOperator.UNEQUAL)) {
			error(String.format(ATTRIBUTE_RELATION_FORBIDDEN_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.EENUM.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RELATION,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && lhsType==EcorePackage.Literals.EENUM) {
			error(String.format(ATTRIBUTE_RELATION_ENUM_COMPARISON, rhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RHS,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && rhsType==EcorePackage.Literals.EENUM) {
			error(String.format(ATTRIBUTE_RELATION_ENUM_COMPARISON, lhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
					ATTRIBUTE_RELATION_INVALID);
		}
	}

	@Check
	public void enumLiterals(EnumLiteral literal) {
		if(literal.eContainer() instanceof ArithmeticExpression) {
			error(String.format("Enum literals may not be used in arithmetic expressions."),
					GrapelPackage.Literals.ENUM_LITERAL__VALUE,
					ARITHMETIC_EXPRESSION_INVALID);
		}
	}
	
	private void checkBooleanComparisons(AttributeRelation relation) {
		EClassifier lhsType = getTypeOfExpression(relation.getLhs());
		if(relation.getRhs() == null) {
			if(lhsType!=EcorePackage.Literals.EBOOLEAN) {
				error(String.format("Non-EBoolean data types may not be used in boolean expressions."),
						GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
						ATTRIBUTE_RELATION_INVALID);
				return;
			}
		}
		
		EClassifier rhsType = getTypeOfExpression(relation.getRhs());
		
		if(lhsType==rhsType && lhsType==EcorePackage.Literals.EBOOLEAN && 
				!(relation.getRelation()==AttributeRelationOperator.EQUAL || relation.getRelation()==AttributeRelationOperator.UNEQUAL)) {
			error(String.format(ATTRIBUTE_RELATION_FORBIDDEN_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.EBOOLEAN.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RELATION,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && lhsType==EcorePackage.Literals.EBOOLEAN) {
			error(String.format(ATTRIBUTE_RELATION_BOOLEAN_COMPARISON, rhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RHS,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && rhsType==EcorePackage.Literals.EBOOLEAN) {
			error(String.format(ATTRIBUTE_RELATION_BOOLEAN_COMPARISON, lhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
					ATTRIBUTE_RELATION_INVALID);
		}
	}

	private void checkStringComparisons(AttributeRelation relation) {
		EClassifier lhsType = getTypeOfExpression(relation.getLhs());
		if(relation.getRhs() == null) {
			return;
		}
		
		EClassifier rhsType = getTypeOfExpression(relation.getRhs());
		if(lhsType==rhsType && lhsType==EcorePackage.Literals.ESTRING && 
				!(relation.getRelation()==AttributeRelationOperator.EQUAL || relation.getRelation()==AttributeRelationOperator.UNEQUAL)) {
			error(String.format(ATTRIBUTE_RELATION_FORBIDDEN_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.ESTRING.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RELATION,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && lhsType==EcorePackage.Literals.ESTRING) {
			error(String.format(ATTRIBUTE_RELATION_STRING_COMPARISON, rhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RHS,
					ATTRIBUTE_RELATION_INVALID);
		}
		
		if(lhsType!=rhsType && rhsType==EcorePackage.Literals.ESTRING) {
			error(String.format(ATTRIBUTE_RELATION_STRING_COMPARISON, lhsType.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
					ATTRIBUTE_RELATION_INVALID);
		}
	}
	
	private void checkFloatComparisons(AttributeRelation relation) {
		EClassifier lhsType = getTypeOfExpression(relation.getLhs());
		if(relation.getRhs() == null) {
			return;
		}
		
		EClassifier rhsType = getTypeOfExpression(relation.getRhs());
		
		if(lhsType==rhsType && lhsType==EcorePackage.Literals.EFLOAT && 
				(relation.getRelation()==AttributeRelationOperator.EQUAL || relation.getRelation()==AttributeRelationOperator.UNEQUAL)) {
			warning(String.format(ATTRIBUTE_RELATION_UNUSUAL_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.EFLOAT.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RELATION,
					ATTRIBUTE_RELATION_DISCURAGED);
		}
		
		if(lhsType==EcorePackage.Literals.EFLOAT && rhsType==EcorePackage.Literals.EINT) {
			warning(String.format(ATTRIBUTE_RELATION_UNUSUAL_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.EFLOAT.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__RHS,
					ATTRIBUTE_RELATION_DISCURAGED);
		}
		
		if(rhsType==EcorePackage.Literals.EFLOAT && lhsType==EcorePackage.Literals.EINT) {
			warning(String.format(ATTRIBUTE_RELATION_UNUSUAL_OPERATION, relation.getRelation().getName(), EcorePackage.Literals.EFLOAT.getName()),
					GrapelPackage.Literals.ATTRIBUTE_RELATION__LHS,
					ATTRIBUTE_RELATION_DISCURAGED);
		}
	}

	public void checkEventNameValid(Event event) {
		if(event.getName() == null)
			return;
		if(keywordBlacklist.contains(event.getName()))
			error(String.format(EVENT_NAME_FORBIDDEN_MESSAGE, event.getName()),
					GrapelPackage.Literals.EVENT__NAME,
					NAME_BLACKLISTED);
		// any style rules?
	}
	
	public void checkEventNameUnique(Event event) {
		EditorGTFile file = (EditorGTFile) event.eContainer();
		long count = file.getEvents().stream().filter(e -> e.getName() !=  null && e.getName().equals(event.getName())).count();
		if (count != 1)
			error(String.format(EVENT_NAME_MULTIPLE_DECLARATIONS_MESSAGE, event.getName()),
					GrapelPackage.Literals.EVENT__NAME,
					NAME_EXPECT_UNIQUE);
	}
	
	public void checkEventPatternNameValid(EventPattern pattern) {
		if(pattern.getName() == null)
			return;
		if(keywordBlacklist.contains(pattern.getName()))
			error(String.format(EVENT_PATTERN_NAME_FORBIDDEN_MESSAGE, pattern.getName()),
					GrapelPackage.Literals.EVENT_PATTERN__NAME,
					NAME_BLACKLISTED);
		// any style rules?
	}
	
	public void checkEventPatternNameUnique(EventPattern pattern) {
		EditorGTFile file = (EditorGTFile) pattern.eContainer();
		long count = file.getEventPatterns().stream().filter(p -> p.getName() !=  null && p.getName().equals(pattern.getName())).count();
		if (count != 1)
			error(String.format(EVENT_PATTERN_NAME_MULTIPLE_DECLARATIONS_MESSAGE, pattern.getName()),
					GrapelPackage.Literals.EVENT_PATTERN__NAME,
					NAME_EXPECT_UNIQUE);
	}
	
	public void checkEventPatternNodeNameValid(EventPatternNode node) {
		if(node.getName() == null)
			return;
		if(keywordBlacklist.contains(node.getName()))
			error(String.format(EVENT_PATTERN_NODE_NAME_FORBIDDEN_MESSAGE, node.getName()),
					GrapelPackage.Literals.EVENT_PATTERN_NODE__NAME,
					NAME_BLACKLISTED);
		// any style rules?
	}
	
	public void checkEventPatternNodeNameUnique(EventPatternNode node) {
		EventPattern pattern = (EventPattern) node.eContainer();
		long count = pattern.getNodes().stream().filter(p -> p.getName() !=  null && p.getName().equals(node.getName())).count();
		if (count != 1)
			error(String.format(EVENT_PATTERN_NODE_NAME_MULTIPLE_DECLARATIONS_MESSAGE, node.getName()),
					GrapelPackage.Literals.EVENT_PATTERN_NODE__NAME,
					NAME_EXPECT_UNIQUE);
	}
	
	public void checkReturnStatementParameters(EventPattern pattern, SpawnStatement statement) {
		if(statement.getReturnParams().size() != statement.getReturnArg().getAttributes().size()) {
			error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_NUMBER_MISSMATCH_MESSAGE , pattern.getName()),
					GrapelPackage.Literals.SPAWN_STATEMENT__RETURN_ARG,
					EVENT_PATTERN_INVALID_RETURN);
			return;
		}
		
		for(int i = 0; i < statement.getReturnParams().size(); i++) {
			EventAttribute expected = statement.getReturnArg().getAttributes().get(i);
			AttributeExpression given = statement.getReturnParams().get(i);
			if(expected.getType() instanceof EClass) {
				if(!(given instanceof EventPatternNodeAttributeExpression)) {
					error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
							GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
							EVENT_PATTERN_INVALID_RETURN);
					continue;
				}
				
				EventPatternNodeAttributeExpression expr = (EventPatternNodeAttributeExpression) given;
				if(expr.getField() != null) {
					error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
							GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
							EVENT_PATTERN_INVALID_RETURN);
					continue;
				}
				EventPatternNodeExpression nodeExpr = (EventPatternNodeExpression) expr.getNodeExpression();
				if(nodeExpr.getAttribute() instanceof EventAttribute) {
					if(expected != nodeExpr.getAttribute())
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
				} else {
					EditorNode gtNode = (EditorNode)nodeExpr.getAttribute();
					if(expected.getType() != gtNode.getType())
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
				}
			}else {
				if((given instanceof EventPatternNodeAttributeExpression)) {
					EClassifier givenType = getTypeOfExpression(given);
					if(!(givenType instanceof EDataType)) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
					if(expected.getType() != givenType) {
						warning(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
				} else {
					EClassifier givenType = getTypeOfExpression(given);
					if(givenType == null) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					if(!(givenType instanceof EDataType)) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
					if(givenType == EcorePackage.Literals.ESTRING && expected.getType() != EcorePackage.Literals.ESTRING) {
						if(!(given instanceof AttributeExpressionLiteral)) {
							error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
									GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
									EVENT_PATTERN_INVALID_RETURN);
							continue;
						} else {
							StringLiteral val = (StringLiteral)given;
							if(expected.getType() == EcorePackage.Literals.EDOUBLE) {
								try {
									Double.parseDouble(val.getValue());
								}catch(Exception e) {
									error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
											GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
											EVENT_PATTERN_INVALID_RETURN);
									continue;
								}
								
							} else if (expected.getType() == EcorePackage.Literals.EINT || expected.getType() == EcorePackage.Literals.ELONG) {
								try {
									Integer.parseInt(val.getValue());
								}catch(Exception e) {
									error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
											GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
											EVENT_PATTERN_INVALID_RETURN);
									continue;
								}
							} else {
								error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
										GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
										EVENT_PATTERN_INVALID_RETURN);
								continue;
							}
						}
						
					}
					
					if(givenType != expected.getType()) {
						warning(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
					}
				}
			}
		}
			
		
	}
	
	public void checkReturnStatementParameters(EventPattern pattern, ApplyStatement statement) {
		if(statement.getReturnParams().size() != statement.getReturnArg().getParameters().size()) {
			error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_NUMBER_MISSMATCH_MESSAGE , pattern.getName()),
					GrapelPackage.Literals.APPLY_STATEMENT__RETURN_ARG,
					EVENT_PATTERN_INVALID_RETURN);
			return;
		}
		
		for(int i = 0; i < statement.getReturnParams().size(); i++) {
			EditorParameter expected = statement.getReturnArg().getParameters().get(i);
			AttributeExpression given = statement.getReturnParams().get(i);
			if(expected.getType() instanceof EClass) {
				if(!(given instanceof EventPatternNodeAttributeExpression)) {
					error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
							GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
							EVENT_PATTERN_INVALID_RETURN);
					continue;
				}
				
				EventPatternNodeAttributeExpression expr = (EventPatternNodeAttributeExpression) given;
				if(expr.getField() != null) {
					error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
							GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
							EVENT_PATTERN_INVALID_RETURN);
					continue;
				}
				EventPatternNodeExpression nodeExpr = (EventPatternNodeExpression) expr.getNodeExpression();
				if(nodeExpr.getAttribute() instanceof EventAttribute) {
					if(expected != nodeExpr.getAttribute())
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
				} else {
					EditorNode gtNode = (EditorNode)nodeExpr.getAttribute();
					if(expected.getType() != gtNode.getType())
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
				}
			}else {
				if((given instanceof EventPatternNodeAttributeExpression)) {
					EClassifier givenType = getTypeOfExpression(given);
					if(!(givenType instanceof EDataType)) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_MESSAGE , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
					if(expected.getType() != givenType) {
						warning(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
				} else {
					EClassifier givenType = getTypeOfExpression(given);
					if(givenType == null) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					if(!(givenType instanceof EDataType)) {
						error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
						continue;
					}
					
					if(givenType == EcorePackage.Literals.ESTRING && expected.getType() != EcorePackage.Literals.ESTRING) {
						if(!(given instanceof AttributeExpressionLiteral)) {
							error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
									GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
									EVENT_PATTERN_INVALID_RETURN);
							continue;
						} else {
							StringLiteral val = (StringLiteral)given;
							if(expected.getType() == EcorePackage.Literals.EDOUBLE) {
								try {
									Double.parseDouble(val.getValue());
								}catch(Exception e) {
									error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
											GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
											EVENT_PATTERN_INVALID_RETURN);
									continue;
								}
								
							} else if (expected.getType() == EcorePackage.Literals.EINT || expected.getType() == EcorePackage.Literals.ELONG) {
								try {
									Integer.parseInt(val.getValue());
								}catch(Exception e) {
									error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
											GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
											EVENT_PATTERN_INVALID_RETURN);
									continue;
								}
							} else {
								error(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_STRING_PARSE_ERROR, pattern.getName()),
										GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
										EVENT_PATTERN_INVALID_RETURN);
								continue;
							}
						}
						
					}
					
					if(givenType != expected.getType()) {
						warning(String.format(SPAWNING_EVENT_PATTERN_PARAMETER_MISSMATCH_WARNING , pattern.getName()),
								GrapelPackage.Literals.RETURN_STATEMENT__RETURN_PARAMS, i,
								EVENT_PATTERN_INVALID_RETURN);
					}
				}
			}
		}
			
		
	}
	
	private void checkObjectExpressions(AttributeExpression expr) {
		if(expr instanceof AttributeExpressionLiteral) {
			return;
		}
		
		if(expr instanceof EventPatternNodeAttributeExpression) {
			EClassifier classifier = getTypeOfExpression(expr);
			if(!(classifier instanceof EDataType || classifier == EcorePackage.Literals.EENUM)) {
				error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_ECLASS),
						GrapelPackage.Literals.EVENT_PATTERN_NODE_ATTRIBUTE_EXPRESSION__NODE_EXPRESSION,
						ARITHMETIC_EXPRESSION_INVALID);
			}
			return;
		}
		
		if(expr instanceof UnaryAttributeExpression) {
			UnaryAttributeExpression uexpr = (UnaryAttributeExpression)expr;
			EClassifier classifier = getTypeOfExpression(uexpr.getOperand());
			if(!(classifier instanceof EDataType)) {
				error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_ECLASS),
						GrapelPackage.Literals.UNARY_ATTRIBUTE_EXPRESSION__OPERAND,
						ARITHMETIC_EXPRESSION_INVALID);
			}
			return;
		}
		
		BinaryAttributeExpression biexpr = (BinaryAttributeExpression)expr;
		EClassifier lhsType = getTypeOfExpression(biexpr.getLeft());
		EClassifier rhsType = getTypeOfExpression(biexpr.getRight());	
		if(!(lhsType instanceof EDataType)) {
			error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_ECLASS),
					GrapelPackage.Literals.BINARY_ATTRIBUTE_EXPRESSION__LEFT,
					ARITHMETIC_EXPRESSION_INVALID);
		}
		if(!(rhsType instanceof EDataType)) {
			error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_ECLASS),
					GrapelPackage.Literals.BINARY_ATTRIBUTE_EXPRESSION__RIGHT,
					ARITHMETIC_EXPRESSION_INVALID);
		}
		
		return;
	}
	
	private void checkBooleanExpressions(AttributeExpression expr) {
		if(expr instanceof AttributeExpressionLiteral) {
			return;
		}
		
		if(expr instanceof EventPatternNodeAttributeExpression) {
			return;
		}
		
		if(expr instanceof UnaryAttributeExpression) {
			UnaryAttributeExpression uexpr = (UnaryAttributeExpression)expr;
			EClassifier classifier = getTypeOfExpression(uexpr.getOperand());
			if(classifier == EcorePackage.Literals.EBOOLEAN) {
				error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_OPERATION , uexpr.getOperator().getName(), classifier.getName()),
						GrapelPackage.Literals.UNARY_ATTRIBUTE_EXPRESSION__OPERATOR,
						ARITHMETIC_EXPRESSION_INVALID);
			}
			return;
		}
		
		BinaryAttributeExpression biexpr = (BinaryAttributeExpression)expr;
		EClassifier lhsType = getTypeOfExpression(biexpr.getLeft());
		EClassifier rhsType = getTypeOfExpression(biexpr.getRight());	
		if(lhsType != rhsType && (lhsType == EcorePackage.Literals.EBOOLEAN || rhsType == EcorePackage.Literals.EBOOLEAN)) {
			error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_OPERATION , biexpr.getOperator().getName(), EcorePackage.Literals.EBOOLEAN.getName()),
					GrapelPackage.Literals.BINARY_ATTRIBUTE_EXPRESSION__OPERATOR,
					ARITHMETIC_EXPRESSION_INVALID);
		}
		
		return;
	}
	
	public void checkStringExpressions(AttributeExpression expr) {
		if(expr instanceof AttributeExpressionLiteral) {
			return;
		}
		
		if(expr instanceof EventPatternNodeAttributeExpression) {
			return;
		}
		
		if(expr instanceof UnaryAttributeExpression) {
			UnaryAttributeExpression uexpr = (UnaryAttributeExpression)expr;
			EClassifier classifier = getTypeOfExpression(uexpr.getOperand());
			if(classifier == EcorePackage.Literals.ESTRING && uexpr.getOperator() != UnaryOperator.NONE) {
				error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_OPERATION , uexpr.getOperator().getName(), classifier.getName()),
						GrapelPackage.Literals.UNARY_ATTRIBUTE_EXPRESSION__OPERATOR,
						ARITHMETIC_EXPRESSION_INVALID);
			}
			return;
		}
		
		BinaryAttributeExpression biexpr = (BinaryAttributeExpression)expr;
		EClassifier lhsType = getTypeOfExpression(biexpr.getLeft());
		EClassifier rhsType = getTypeOfExpression(biexpr.getRight());	
		if(lhsType != rhsType && (lhsType == EcorePackage.Literals.ESTRING || rhsType == EcorePackage.Literals.ESTRING)) {
			if(biexpr.getOperator() != ArithmeticOperator.PLUS) {
				error(String.format(ARITHMETIC_EXPRESSION_FORBIDDEN_OPERATION , biexpr.getOperator().getName(), EcorePackage.Literals.ESTRING.getName()),
						GrapelPackage.Literals.BINARY_ATTRIBUTE_EXPRESSION__OPERATOR,
						ARITHMETIC_EXPRESSION_INVALID);
			}
		}
		
		return;
	}
	
	public static EClassifier getTypeOfExpression(AttributeExpression expr) throws ParseException{
		if(expr instanceof AttributeExpressionLiteral) {
			AttributeExpressionLiteral literal = (AttributeExpressionLiteral)expr;
			if(literal instanceof DoubleLiteral) {
				return EcorePackage.Literals.EDOUBLE;
			} else if(literal instanceof IntegerLiteral) {
				return EcorePackage.Literals.EINT;
			} else if(literal instanceof StringLiteral) {
				return EcorePackage.Literals.ESTRING;
			} else if(literal instanceof EnumLiteral) {
				return EcorePackage.Literals.EENUM;
			} else {
				return EcorePackage.Literals.EBOOLEAN;
			}
		}
		
		if(expr instanceof EventPatternNodeAttributeExpression) {
			EventPatternNodeAttributeExpression epnExpr = (EventPatternNodeAttributeExpression) expr;
			if(epnExpr.getField()!= null) {
				if(epnExpr.getField().getEType() instanceof EEnum) {
					return EcorePackage.Literals.EENUM;
				} else {
					return epnExpr.getField().getEType();
				}
			}
			else {
				EventPatternNodeExpression epne = epnExpr.getNodeExpression();
				if(epne == null)
					throw new ParseException("Parse error in "+expr.getClass().getName()+", token is null.");
				
				if(epne.getAttribute() instanceof EventAttribute) {
					EventAttribute ea = (EventAttribute)epne.getAttribute();
					if(ea.getType() instanceof EEnum) {
						return EcorePackage.Literals.EENUM;
					}
					return ea.getType();
				}else {
					EditorNode en = (EditorNode)epne.getAttribute();
					if(en.getType() instanceof EEnum) {
						return EcorePackage.Literals.EENUM;
					}
					return en.getType();
				}
			}	
		}
		
		if(expr instanceof UnaryAttributeExpression) {
			UnaryAttributeExpression uexpr = (UnaryAttributeExpression)expr;
			return getTypeOfExpression(uexpr.getOperand());
		}
		
		BinaryAttributeExpression biexpr = (BinaryAttributeExpression)expr;
		EClassifier lhsType = getTypeOfExpression(biexpr.getLeft());
		EClassifier rhsType = getTypeOfExpression(biexpr.getRight());
		if(lhsType == rhsType)
			return lhsType;
		
		if(lhsType == EcorePackage.Literals.ELONG && rhsType == EcorePackage.Literals.EINT)
			return EcorePackage.Literals.EINT;
		
		if(rhsType == EcorePackage.Literals.ELONG && lhsType == EcorePackage.Literals.EINT)
			return EcorePackage.Literals.EINT;
		
		if(lhsType == EcorePackage.Literals.ESTRING || rhsType == EcorePackage.Literals.ESTRING) {
			return EcorePackage.Literals.ESTRING;
		}
		
		if(lhsType == EcorePackage.Literals.EDOUBLE || rhsType == EcorePackage.Literals.EDOUBLE) {
			return EcorePackage.Literals.EDOUBLE;
		}
		
		return null;
	}

}
