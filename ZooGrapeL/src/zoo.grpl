import "platform:/resource/Zoo/model/zoo.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern container {
	zoo: Zoo
}
pattern animalInEnclosure {
	enclosure: Enclosure{
		-animals -> animal
	}
	animal: Animal
}
pattern animalInEnclosureTemperature {
	enclosure: Enclosure{
		-animals -> animal
	}
	animal: Animal
}
pattern apeInEnclosure {
	enclosure: Enclosure{
		-animals -> ape
	}
	ape: Ape
}
pattern bearInEnclosure {
	enclosure: Enclosure{
		-animals -> bear
	}
	bear: Bear
}
pattern camelInEnclosure {
	enclosure: Enclosure{
		-animals -> camel
	}
	camel: Camel
}
pattern moreAnimalsThanCapacity {
	enclosure: Enclosure{
	}
	# enclosure.capacity < count(animalInEnclosure)
}

event tempartureWarning {
	Animal animal;
	Enclosure enclosure;
	EDouble enclosureTemparture;
}
event humidityWarning {
	Animal animal;
	Enclosure enclosure;
	EDouble enclosureHumidity;
}
event bearBeforeApe {
	Enclosure enclosure;
	Bear bear;
	Ape ape;
}
event sizeWarning {
	Enclosure enclosure;
	EDouble maxSize;
}
event capacityWarning {
	Enclosure enclosure;
	EInt maxCapacity;
	//EInt actualSize;
}
event animalsWithSameName {
	Animal animal1;
	Animal animal2;
	EString name;
}
event animalsWithSameAge {
	Animal animal1;
	Animal animal2;
	EInt age;
}
event animalsWithSameNameAndAge1 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event animalsWithSameNameAndAge2 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event animalsWithSameNameAndAge3 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event animalsWithSameNameAndAge4 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event toleranceSinCosWarning {
	Bear bear;
	EDouble tolerance;
}

event_pattern temperatureCheck spawns tempartureWarning {
	newAnimal: animalInEnclosure
	
	newAnimal {
		! vanished(newAnimal) &&
		newAnimal.animal.tolerance >= abs(newAnimal.animal.preferedTemperature - newAnimal.enclosure.temperature)
	}
	
	spawn tempartureWarning(newAnimal.animal,newAnimal.enclosure,newAnimal.enclosure.temperature)
}
event_pattern humidityCheck spawns humidityWarning {
	newAnimal: animalInEnclosure
	
	newAnimal {
		// ignore humidity in mixed_enclosure: Literals/ Enummeration not supported jet
		// newAnimal.enclosure.enviromentType &&
		[! vanished(newAnimal) &&
		abs(newAnimal.animal.preferedHumidity - newAnimal.enclosure.humidity) <= newAnimal.animal.tolerance]
	}
	
	spawn humidityWarning(newAnimal.animal,newAnimal.enclosure,newAnimal.enclosure.humidity)
}
event_pattern bearBeforeApeCheck spawns bearBeforeApe {
	newBear: bearInEnclosure
	newApe: apeInEnclosure
	
	newBear.enclosure == newApe.enclosure
	
	newBear -> newApe {
		[! vanished(newBear) && ! vanished(newApe)]
	}
	
	spawn bearBeforeApe(newApe.enclosure, newBear.bear, newApe.ape)
}
// meta model doesn't update even though changed in graphics editor
//event_pattern sizeCheck spawns sizeWarning {
//	newAnimal: animalInEnclosure
//	
//	newAnimal{
//		! vanished(newAnimal)
//	}
//	
//	spawn sizeWarning(newAnimal.enclosure,enclsoureSize.enclosure.maxSize)
//}
// not needed -> direct pattern, count included?
event_pattern sizeCheck spawns capacityWarning {
	encolsureCapacity: moreAnimalsThanCapacity
	
	encolsureCapacity{
		! vanished(encolsureCapacity)
	}
	
	spawn capacityWarning(encolsureCapacity.enclosure,encolsureCapacity.enclosure.capacity)
}
event_pattern toleranceOfBearSinCosCheck spawns toleranceSinCosWarning {
	newBear: bearInEnclosure
	
	newBear {
		! vanished(newBear) &&
		sin(newBear.bear.tolerance) == cos(newBear.bear.tolerance)
	}
	
	spawn toleranceSinCosWarning(newBear.bear,newBear.bear.tolerance)
}
event_pattern nameCheck spawns animalsWithSameName {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
//	animal1.animal.name == animal2.animal.name // cannot put attributes in constraint here
	
	animal1 && animal2 {
		animal1.animal.name == animal2.animal.name &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameName(animal1.animal,animal2.animal,animal1.animal.name)
}
event_pattern ageCheck spawns animalsWithSameAge {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
//	animal1.animal.age == animal2.animal.age // cannot put attributes in constraint here
	
	animal1 && animal2 {
		animal1.animal.age == animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameAge(animal1.animal,animal2.animal,animal1.animal.age)
}
event_pattern nameAndAgeCheck1 spawns animalsWithSameNameAndAge1 {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
	animal1 && animal2 {
		animal1.animal.name + animal1.animal.age == animal2.animal.name + animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameNameAndAge1(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
}
//event_pattern nameAndAgeCheck2 spawns animalsWithSameNameAndAge2 {
//	animal1: animalInEnclosure
//	animal2: animalInEnclosure
//	
//	animal1.animal.name + animal1.animal.age == animal2.animal.name + animal2.animal.age // cannot put attributes in constraint here
//	
//	animal1 && animal2 {
//		! vanished(animal1) && ! vanished(animal2)
//	}
//	
//	spawn animalsWithSameNameAndAge2(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
//}
event_pattern nameAndAgeCheck3 spawns animalsWithSameNameAndAge3 {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
//	animal1.animal.name == animal2.animal.name && animal1.animal.age == animal2.animal.age // cannot put attributes in constraint here
	
	animal1 && animal2 {
		animal1.animal.name == animal2.animal.name && animal1.animal.age == animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameNameAndAge3(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
}
// pattern broken, multiple context constraints/ brackets
//event_pattern nameAndAgeCheck4 spawns animalsWithSameNameAndAge4 {
//	animalswSameName: animalsWithSameName
//	animalswSameAge: animalsWithSameAge
//	
//	animalswSameAge.animal1 == animalswSameName.animal1 && animalswSameAge.animal2 == animalswSameName.animal2 ||
//	animalswSameAge.animal1 == animalswSameName.animal2 && animalswSameAge.animal1 == animalswSameName.animal2
//	
//	animalswSameAge && animalswSameName {
//		! vanished(animal1) && ! vanished(animal2)		
//	}
//	
//	spawn animalsWithSameNameAndAge4(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
//}
